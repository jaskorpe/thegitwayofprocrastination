; Only add directory to load-path if you have org-mode installed
;locally.
;(add-to-list 'load-path "~/.emacs.d/org-mode/lisp")

(require 'org-publish)

; Disable backup-files (those generated by emacs during html
; publishing)
(setq make-backup-files nil)

; This will be inserted in the postamble
(setq org-export-html-validation-link "
<a href=\"http://validator.w3.org/check?uri=referer\">
  <img src=\"http://www.w3.org/Icons/valid-xhtml10\"
       alt=\"Valid XHTML 1.0 Strict\" height=\"31\"
       width=\"88\" /> 
</a>
")

; This will also dictate xml encoding and charset in ContentType
(setq org-export-html-coding-system 'utf-8)

(setq org-publish-project-alist
      '(

	("org-notes"

	 ; Where org files are found. Also recursive
	 :base-directory "~/prosjekt/www/"
	 :recursive t
	 :exclude "*~"
	 :base-extension "org"

	 ; Where html files should be put
	 :publishing-directory "~/www_docs/"

	 :publishing-function org-publish-org-to-html

	 :headline-levels 4

	 ; Insert auto generated preamble
	 :auto-preamble t

	 ; Style sheet. Could also be a <style>-tag.
	 :style "<link rel=\"stylesheet\" type=\"text/css\"
                       href=\"http://www.mindmutation.net/style.css\" />"

	 ; String or function with text to insert as postamble.
	 ;:postamble ""

	 :auto-index t
	 :index-filename "sitemap.org"
	 :index-title "Sitemap"

	 ; If you want _ to convert text to subscript set to t.
	 :sub-superscript nil

	 ; TOC in each file disabled.
	 :table-of-contents nil

	 ; Disable numbers in front of each section header.
	 :section-numbers nil

	 :author "Jon Anders Skorpen"
	 :email "jaskorpe@ping.uio.no"
	 )


	; Static material which should just be copied over. Be ware of
	; permissions
	("org-static"
	 :base-directory "~/prosjekt/www/"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|ogg\\|gz\\|xz"
	 :publishing-directory "~/www_docs/"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )

	("org" :components ("org-notes" "org-static"))



	))


; To run this from bash: emacs -l publish.el --batch --execute='(publish)'
(defun publish()
  (interactive)
  (org-publish-project
   (assoc "org" org-publish-project-alist)))
